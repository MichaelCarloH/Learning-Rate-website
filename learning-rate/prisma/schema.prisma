generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String     @id @default(cuid()) @db.VarChar(191)
  name          String?    @db.VarChar(191)
  username      String?    @unique @db.VarChar(191)
  email         String?    @unique @db.VarChar(191)
  emailVerified DateTime?
  image         String?    @db.VarChar(191)
  createdAt     DateTime   @default(dbgenerated("CURRENT_TIMESTAMP(3)"))
  updatedAt     DateTime   @default(dbgenerated("CURRENT_TIMESTAMP(3)"))
  password      String     @db.VarChar(72)
  progress      progress[]
}

model UserInfo {
  userInfoID   Int    @id @default(autoincrement())
  userID       String @unique @db.VarChar(45)
  firstname    String @db.VarChar(45)
  lastname     String @db.VarChar(45)
  skillLevelID Int
  skill        skill  @relation(fields: [skillLevelID], references: [skillLevelID], onDelete: NoAction, onUpdate: NoAction, map: "skill")
}

model lesson {
  lessonID          Int        @id @default(autoincrement())
  lessonTitle       String     @db.VarChar(150)
  lessonTag         String     @db.VarChar(100)
  lessonDescription String
  lessonImg         String     @db.VarChar(45)
  lessonLength      Int
  lessonLink        String     @db.VarChar(45)
  isLocked          Int        @default(1) @db.SmallInt
  progress          progress[]
}

model progress {
  progressID Int    @id @default(autoincrement())
  userID     String @db.VarChar(191)
  lessonID   Int
  progress   Int    @default(0)
  User       User   @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "User")
  lesson     lesson @relation(fields: [lessonID], references: [lessonID], onDelete: NoAction, onUpdate: NoAction, map: "lesson")
}

model skill {
  skillLevelID Int        @id
  skillname    String     @unique @db.VarChar(45)
  UserInfo     UserInfo[]
}

model trainingData {
  trainingDataID Int          @id @default(autoincrement())
  trainingSetID  Int
  inputData      String
  outputData     String
  trainingSets   trainingSets @relation(fields: [trainingSetID], references: [trainingSetID], onDelete: NoAction, onUpdate: NoAction, map: "id")
}

model trainingSets {
  trainingSetID Int            @id @default(autoincrement())
  setName       String         @db.VarChar(45)
  inputWidth    Int
  outputWidth   Int
  trainingData  trainingData[]
}
