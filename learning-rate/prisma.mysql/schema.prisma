generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  username      String?    @unique
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  password      String     @db.VarChar(72)
  progress      progress[]
}

model lesson {
  lessonID          Int        @id @default(autoincrement())
  lessonTitle       String     @unique(map: "lessonTitle_UNIQUE") @db.VarChar(150)
  lessonTag         String     @db.VarChar(100)
  lessonDescription String     @db.Text
  lessonImg         String     @db.VarChar(45)
  lessonLength      Int
  lessonLink        String     @db.VarChar(45)
  isLocked          Int        @default(1) @db.TinyInt
  progress          progress[]
}

model progress {
  progressID Int    @id @default(autoincrement())
  userID     String
  lessonID   Int
  progress   Int    @default(0)
  User       User   @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "User")
  lesson     lesson @relation(fields: [lessonID], references: [lessonID], onDelete: NoAction, onUpdate: NoAction, map: "lesson")

  @@index([lessonID], map: "lesson_idx")
  @@index([userID], map: "user_idx")
}

model skill {
  skillLevelID Int        @id
  skillname    String     @db.VarChar(45)
  UserInfo     UserInfo[]
}

model trainingData {
  trainingDataID Int          @id @unique(map: "trainingDataID_UNIQUE") @default(autoincrement())
  trainingSetID  Int
  inputData      String       @db.MediumText
  outputData     String       @db.MediumText
  trainingSets   trainingSets @relation(fields: [trainingSetID], references: [trainingSetID], onDelete: NoAction, onUpdate: NoAction, map: "setid")

  @@index([trainingSetID], map: "id_idx")
}

model trainingSets {
  trainingSetID Int            @id @unique(map: "trainingSetID_UNIQUE") @default(autoincrement())
  setName       String         @unique(map: "setName_UNIQUE") @db.VarChar(45)
  inputWidth    Int
  outputWidth   Int
  trainingData  trainingData[]
}

model UserInfo {
  userInfoID   Int    @id @unique(map: "userInfoID_UNIQUE") @default(autoincrement())
  userID       String @unique(map: "userID_UNIQUE") @db.VarChar(45)
  firstname    String @db.VarChar(45)
  lastname     String @db.VarChar(45)
  skillLevelID Int
  skill        skill  @relation(fields: [skillLevelID], references: [skillLevelID], onDelete: NoAction, onUpdate: NoAction, map: "skill")

  @@index([skillLevelID], map: "skill_idx")
}
